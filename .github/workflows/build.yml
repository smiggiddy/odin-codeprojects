name: Build and Push Docker Images

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        project:
          - admin-dashboard
          - battleship
          - calculator
          - cv-project
          - inventory
          - library
          - messages
          - nodejs-mini-message-board
          - portfolio
          - restaurant
          - shopping-cart
          - signup_form
          - tictactoe
          - weather
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Registry based on GITHUB_SERVER_URL
        run: |
          SERVER_URL="${{ github.server_url }}"
          if [[ "${SERVER_URL}" =~ "github.com" ]]; then
            echo "REGISTRY=ghcr.io" >> $GITHUB_ENV
            REGISTRY=ghcr.io
          elif [[ "${SERVER_URL}" =~ "git.thecodedom.com" ]]; then
            echo "REGISTRY=git.thecodedom.com" >> $GITHUB_ENV
            REGISTRY=git.thecodedom.com
          fi
          echo "Registry is $REGISTRY"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        id: build-and-push
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/odin-codeprojects/${{ matrix.project }}
        run: |
          IMAGE_TAG_LATEST=$IMAGE_NAME:latest

          # Check if the latest image exists in the registry
          IMAGE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://ghcr.io/v2/${{ github.repository_owner }}/${{ matrix.project }}/manifests/latest")
          
          
          if [ "$IMAGE_EXISTS" == "200" ]; then
            echo "Latest image exists, checking for changes..."

            # Get the latest image digest
            LATEST_DIGEST=$(curl -s -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://ghcr.io/v2/${{ github.repository_owner }}/${{ matrix.project }}/manifests/latest" | jq -r '.config.digest')

            # Get the digest of the current revision image
            CURRENT_DIGEST=$(docker buildx bake --print ${{ matrix.project }}/devops/Dockerfile | grep '^sha256:' | head -n 1 | awk '{print $2}')
           
            if [ "$LATEST_DIGEST" == "$CURRENT_DIGEST" ]; then
              echo "No changes detected, skipping build."
            else
              echo "Changes detected, building..."
              docker buildx build \
                --push \
                -t $IMAGE_TAG_LATEST \
                -f ${{ matrix.project }}/devops/Dockerfile \
                --build-arg TARGET_REVISION=$(git rev-parse HEAD) \
                --cache-from type=gha \
                --cache-to type=gha,mode=max \
                ${{ matrix.project }}
            fi
          else
            echo "Latest image does not exist, building..."
            docker buildx build \
              --push \
              -t $IMAGE_TAG_LATEST \
              -f ${{ matrix.project }}/devops/Dockerfile \
              --build-arg TARGET_REVISION=$(git rev-parse HEAD) \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              ${{ matrix.project }}
          fi